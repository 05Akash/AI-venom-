[
    {
        "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. SALARY_CALCULATOR.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 EMPLOYEE-NAME PIC X(20).\n01 HOURS-WORKED PIC 9(3) VALUE 0.\n01 HOURLY-RATE PIC 9(5)V99 VALUE 0.\n01 SALARY PIC 9(6)V99 VALUE 0.\nPROCEDURE DIVISION.\nACCEPT EMPLOYEE-NAME FROM CONSOLE.\nACCEPT HOURS-WORKED FROM CONSOLE.\nACCEPT HOURLY-RATE FROM CONSOLE.\nCOMPUTE SALARY = HOURS-WORKED * HOURLY-RATE.\nDISPLAY 'Employee: ', EMPLOYEE-NAME.\nDISPLAY 'Salary: ', SALARY.",
        "documentation": {
            "program_name": "SALARY_CALCULATOR",
            "description": "This program calculates the salary of an employee based on the hours worked and hourly rate.",
            "purpose": "Demonstrate basic salary calculation using user input in COBOL.",
            "data_division": {
                "working_storage": [
                    {
                        "name": "EMPLOYEE-NAME",
                        "description": "Field to store the name of the employee (up to 20 characters)."
                    },
                    {
                        "name": "HOURS-WORKED",
                        "description": "Integer field to store the hours worked by the employee (up to 3 digits)."
                    },
                    {
                        "name": "HOURLY-RATE",
                        "description": "Numeric field to store the hourly rate (up to 5 digits before the decimal and 2 digits after)."
                    },
                    {
                        "name": "SALARY",
                        "description": "Numeric field to store the calculated salary (up to 6 digits before the decimal and 2 digits after)."
                    }
                ]
            },
            "procedure_division": {
                "steps": [
                    "Accept employee name, hours worked, and hourly rate from console.",
                    "Calculate salary by multiplying hours worked and hourly rate.",
                    "Display employee name and calculated salary."
                ]
            },
            "usage": "Run the program and input employee data when prompted. The program will calculate and display the salary."
        }
    },
    {
        "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. STUDENT_GRADE_CALCULATOR.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 STUDENT-NAME PIC X(20).\n01 MARKS-OBTAINED PIC 9(3) VALUE 0.\n01 GRADE PIC X.\nPROCEDURE DIVISION.\nACCEPT STUDENT-NAME FROM CONSOLE.\nACCEPT MARKS-OBTAINED FROM CONSOLE.\nIF MARKS-OBTAINED >= 90\n   MOVE 'A' TO GRADE\nELSE IF MARKS-OBTAINED >= 80\n   MOVE 'B' TO GRADE\nELSE IF MARKS-OBTAINED >= 70\n   MOVE 'C' TO GRADE\nELSE IF MARKS-OBTAINED >= 60\n   MOVE 'D' TO GRADE\nELSE\n   MOVE 'F' TO GRADE\nEND-IF.\nDISPLAY 'Student: ', STUDENT-NAME.\nDISPLAY 'Grade: ', GRADE.",
        "documentation": {
            "program_name": "STUDENT_GRADE_CALCULATOR",
            "description": "This program calculates the grade of a student based on marks obtained.",
            "purpose": "Demonstrate grade calculation using conditional statements in COBOL.",
            "data_division": {
                "working_storage": [
                    {
                        "name": "STUDENT-NAME",
                        "description": "Field to store the name of the student (up to 20 characters)."
                    },
                    {
                        "name": "MARKS-OBTAINED",
                        "description": "Integer field to store the marks obtained by the student (up to 3 digits)."
                    },
                    {
                        "name": "GRADE",
                        "description": "Character field to store the calculated grade (A, B, C, D, or F)."
                    }
                ]
            },
            "procedure_division": {
                "steps": [
                    "Accept student name and marks obtained from console.",
                    "Using conditional statements, calculate and assign the grade based on the marks obtained.",
                    "Display the student's name and calculated grade."
                ]
            },
            "usage": "Run the program and input the student's name and marks obtained. The program will calculate and display the grade."
        }
    },
        {
            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. EMPLOYEE_INFO.\nDATA DIVISION.\nFILE SECTION.\nFD EMPLOYEE-FILE.\n01 EMPLOYEE-RECORD.\n   05 EMPLOYEE-ID PIC X(5).\n   05 EMPLOYEE-NAME PIC X(20).\n   05 EMPLOYEE-DEPARTMENT PIC X(10).\nWORKING-STORAGE SECTION.\n01 WS-EMPLOYEE-ID PIC X(5).\nPROCEDURE DIVISION.\nOPEN INPUT EMPLOYEE-FILE.\nACCEPT WS-EMPLOYEE-ID FROM CONSOLE.\nREAD EMPLOYEE-FILE INTO EMPLOYEE-RECORD.\nPERFORM UNTIL EMPLOYEE-ID = WS-EMPLOYEE-ID\n   READ EMPLOYEE-FILE INTO EMPLOYEE-RECORD\nEND-PERFORM.\nDISPLAY 'Employee ID: ', EMPLOYEE-ID.\nDISPLAY 'Employee Name: ', EMPLOYEE-NAME.\nDISPLAY 'Employee Department: ', EMPLOYEE-DEPARTMENT.\nCLOSE EMPLOYEE-FILE.",
            "documentation": {
              "program_name": "EMPLOYEE_INFO",
              "description": "This program retrieves employee information from a file based on the employee ID.",
              "purpose": "Demonstrate file handling and record retrieval in COBOL.",
              "data_division": {
                "file_section": {
                  "file_description": "EMPLOYEE-FILE is a file containing employee records.",
                  "record_structure": [
                    {
                      "name": "EMPLOYEE-ID",
                      "description": "Field to store the employee ID (up to 5 characters)."
                    },
                    {
                      "name": "EMPLOYEE-NAME",
                      "description": "Field to store the employee name (up to 20 characters)."
                    },
                    {
                      "name": "EMPLOYEE-DEPARTMENT",
                      "description": "Field to store the employee department (up to 10 characters)."
                    }
                  ]
                },
                "working_storage": [
                  {
                    "name": "WS-EMPLOYEE-ID",
                    "description": "Field to store the employee ID entered by the user (up to 5 characters)."
                  }
                ]
              },
              "procedure_division": {
                "steps": [
                  "Open the EMPLOYEE-FILE for input.",
                  "Accept the employee ID from the console.",
                  "Read records from EMPLOYEE-FILE until the desired employee ID is found.",
                  "Display the employee ID, name, and department.",
                  "Close the EMPLOYEE-FILE."
                ]
              },
              "usage": "Run the program and input an employee ID to retrieve the corresponding employee information."
            }
          },    
        {
            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. INVENTORY_MANAGER.\nDATA DIVISION.\nFILE SECTION.\nFD INVENTORY-FILE.\n01 INVENTORY-RECORD.\n   05 PRODUCT-ID PIC X(5).\n   05 PRODUCT-NAME PIC X(20).\n   05 QUANTITY PIC 9(5) VALUE 0.\nWORKING-STORAGE SECTION.\n01 WS-PRODUCT-ID PIC X(5).\n01 WS-QUANTITY PIC 9(5).\nPROCEDURE DIVISION.\nOPEN INPUT INVENTORY-FILE.\nACCEPT WS-PRODUCT-ID FROM CONSOLE.\nACCEPT WS-QUANTITY FROM CONSOLE.\nREAD INVENTORY-FILE INTO INVENTORY-RECORD.\nPERFORM UNTIL PRODUCT-ID = WS-PRODUCT-ID\n   READ INVENTORY-FILE INTO INVENTORY-RECORD\nEND-PERFORM.\nCOMPUTE QUANTITY = QUANTITY + WS-QUANTITY.\nDISPLAY 'Updated Quantity for ', PRODUCT-NAME, ': ', QUANTITY.\nCLOSE INVENTORY-FILE.",
            "documentation": {
              "program_name": "INVENTORY_MANAGER",
              "description": "This program manages inventory by updating the quantity of a product.",
              "purpose": "Demonstrate file handling, record retrieval, and quantity update in COBOL.",
              "data_division": {
                "file_section": {
                  "file_description": "INVENTORY-FILE is a file containing inventory records.",
                  "record_structure": [
                    {
                      "name": "PRODUCT-ID",
                      "description": "Field to store the product ID (up to 5 characters)."
                    },
                    {
                      "name": "PRODUCT-NAME",
                      "description": "Field to store the product name (up to 20 characters)."
                    },
                    {
                      "name": "QUANTITY",
                      "description": "Numeric field to store the quantity of the product (up to 5 digits)."
                    }
                  ]
                },
                "working_storage": [
                  {
                    "name": "WS-PRODUCT-ID",
                    "description": "Field to store the product ID entered by the user (up to 5 characters)."
                  },
                  {
                    "name": "WS-QUANTITY",
                    "description": "Field to store the quantity entered by the user for updating (up to 5 digits)."
                  }
                ]
              },
              "procedure_division": {
                "steps": [
                  "Open the INVENTORY-FILE for input.",
                  "Accept the product ID and quantity to update from the console.",
                  "Read records from INVENTORY-FILE until the desired product ID is found.",
                  "Update the quantity by adding the entered quantity.",
                  "Display the updated quantity for the product.",
                  "Close the INVENTORY-FILE."
                ]
              },
              "usage": "Run the program and input a product ID and quantity to update the inventory quantity."
            }
          },
            {
                "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. STUDENT_RECORD_MANAGER.\nDATA DIVISION.\nFILE SECTION.\nFD STUDENT-FILE.\n01 STUDENT-RECORD.\n   05 STUDENT-ID PIC X(5).\n   05 STUDENT-NAME PIC X(20).\n   05 MARKS PIC 9(3).\nWORKING-STORAGE SECTION.\n01 WS-TOTAL-STUDENTS PIC 9(3) VALUE 0.\n01 WS-TOTAL-MARKS PIC 9(3)V9(2) VALUE 0.\nPROCEDURE DIVISION.\nOPEN INPUT STUDENT-FILE.\nREAD STUDENT-FILE INTO STUDENT-RECORD.\nPERFORM UNTIL STUDENT-ID = '99999'\n   ADD MARKS TO WS-TOTAL-MARKS\n   ADD 1 TO WS-TOTAL-STUDENTS\n   READ STUDENT-FILE INTO STUDENT-RECORD\nEND-PERFORM.\nCOMPUTE AVERAGE-MARKS = WS-TOTAL-MARKS / WS-TOTAL-STUDENTS.\nDISPLAY 'Average Marks: ', AVERAGE-MARKS.\nCLOSE STUDENT-FILE.",
                "documentation": {
                    "program_name": "STUDENT_RECORD_MANAGER",
                    "description": "This program calculates the average marks of students stored in a file.",
                    "purpose": "Demonstrate file handling, record processing, and average calculation in COBOL.",
                    "data_division": {
                        "file_section": {
                            "file_description": "STUDENT-FILE is a file containing student records.",
                            "record_structure": [
                                {
                                    "name": "STUDENT-ID",
                                    "description": "Field to store the student ID (up to 5 characters)."
                                },
                                {
                                    "name": "STUDENT-NAME",
                                    "description": "Field to store the student name (up to 20 characters)."
                                },
                                {
                                    "name": "MARKS",
                                    "description": "Numeric field to store the marks of the student (up to 3 digits)."
                                }
                            ]
                        },
                        "working_storage": [
                            {
                                "name": "WS-TOTAL-STUDENTS",
                                "description": "Numeric field to store the total number of students processed."
                            },
                            {
                                "name": "WS-TOTAL-MARKS",
                                "description": "Numeric field to store the total marks of all students processed."
                            },
                            {
                                "name": "WS-AVERAGE-MARKS",
                                "description": "Numeric field to store the average marks calculated."
                            }
                        ]
                    },
                    "procedure_division": {
                        "steps": [
                            "Open the STUDENT-FILE for input.",
                            "Read the first student record from STUDENT-FILE.",
                            "Loop until the end of file or STUDENT-ID equals '99999'.",
                            "Add the marks of each student to WS-TOTAL-MARKS and increment WS-TOTAL-STUDENTS.",
                            "Read the next student record.",
                            "Compute the average marks by dividing WS-TOTAL-MARKS by WS-TOTAL-STUDENTS.",
                            "Display the average marks.",
                            "Close the STUDENT-FILE."
                        ]
                    },
                    "usage": "Run the program to calculate and display the average marks of students stored in the file."
                }
            },
                {
                    "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. ATM_TRANSACTION.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 ACCOUNT-NUMBER PIC X(10).\n01 BALANCE PIC 9(6)V99 VALUE 0.\n01 AMOUNT PIC 9(6)V99 VALUE 0.\n01 OPTION PIC 9 VALUE 0.\nPROCEDURE DIVISION.\nDISPLAY 'Welcome to the ATM.'.\nDISPLAY 'Enter your account number: '.\nACCEPT ACCOUNT-NUMBER FROM CONSOLE.\nDISPLAY 'Select your option:'\nDISPLAY '1. Withdraw'\nDISPLAY '2. Deposit'\nACCEPT OPTION FROM CONSOLE.\nIF OPTION = 1\n   DISPLAY 'Enter amount to withdraw: '\n   ACCEPT AMOUNT FROM CONSOLE.\n   IF AMOUNT <= BALANCE\n      COMPUTE BALANCE = BALANCE - AMOUNT\n      DISPLAY 'Transaction Successful.'\n   ELSE\n      DISPLAY 'Insufficient Balance.'\n   END-IF\nELSE IF OPTION = 2\n   DISPLAY 'Enter amount to deposit: '\n   ACCEPT AMOUNT FROM CONSOLE.\n   COMPUTE BALANCE = BALANCE + AMOUNT\n   DISPLAY 'Transaction Successful.'\nELSE\n   DISPLAY 'Invalid Option.'\nEND-IF.",
                    "documentation": {
                        "program_name": "ATM_TRANSACTION",
                        "description": "This program simulates an ATM transaction system.",
                        "purpose": "Demonstrate basic ATM transaction functionalities in COBOL.",
                        "data_division": {
                            "working_storage": [
                                {
                                    "name": "ACCOUNT-NUMBER",
                                    "description": "Field to store the account number (up to 10 characters)."
                                },
                                {
                                    "name": "BALANCE",
                                    "description": "Numeric field to store the account balance (up to 6 digits before the decimal and 2 digits after)."
                                },
                                {
                                    "name": "AMOUNT",
                                    "description": "Numeric field to store the transaction amount (up to 6 digits before the decimal and 2 digits after)."
                                },
                                {
                                    "name": "OPTION",
                                    "description": "Numeric field to store the selected option (1 for Withdraw, 2 for Deposit)."
                                }
                            ]
                        },
                        "procedure_division": {
                            "steps": [
                                "Display welcome message and prompt for account number input.",
                                "Display options (Withdraw/Deposit) and accept user's choice.",
                                "If option is Withdraw (1), prompt for withdrawal amount and perform balance check.",
                                "If option is Deposit (2), prompt for deposit amount.",
                                "Display transaction status (Successful/Insufficient Balance/Invalid Option)."
                            ]
                        },
                        "usage": "Run the program to simulate an ATM transaction based on user input."
                    }
                },
                    {
                        "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. EMPLOYEE_BONUS_CALCULATOR.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 EMPLOYEE-ID PIC X(5).\n01 EMPLOYEE-SALARY PIC 9(6)V99 VALUE 0.\n01 BONUS PIC 9(6)V99 VALUE 0.\nPROCEDURE DIVISION.\nACCEPT EMPLOYEE-ID FROM CONSOLE.\nACCEPT EMPLOYEE-SALARY FROM CONSOLE.\nIF EMPLOYEE-SALARY >= 50000\n   COMPUTE BONUS = EMPLOYEE-SALARY * 0.1\nELSE IF EMPLOYEE-SALARY >= 30000\n   COMPUTE BONUS = EMPLOYEE-SALARY * 0.05\nELSE\n   COMPUTE BONUS = 0\nEND-IF.\nDISPLAY 'Employee ID: ', EMPLOYEE-ID.\nDISPLAY 'Bonus: ', BONUS.",
                        "documentation": {
                            "program_name": "EMPLOYEE_BONUS_CALCULATOR",
                            "description": "This program calculates the bonus for an employee based on their salary.",
                            "purpose": "Demonstrate bonus calculation based on salary ranges in COBOL.",
                            "data_division": {
                                "working_storage": [
                                    {
                                        "name": "EMPLOYEE-ID",
                                        "description": "Field to store the employee ID (up to 5 characters)."
                                    },
                                    {
                                        "name": "EMPLOYEE-SALARY",
                                        "description": "Numeric field to store the employee's salary (up to 6 digits before the decimal and 2 digits after)."
                                    },
                                    {
                                        "name": "BONUS",
                                        "description": "Numeric field to store the calculated bonus (up to 6 digits before the decimal and 2 digits after)."
                                    }
                                ]
                            },
                            "procedure_division": {
                                "steps": [
                                    "Accept employee ID and salary from console.",
                                    "Calculate bonus based on salary ranges (10% for salary >= 50000, 5% for salary >= 30000, else 0).",
                                    "Display employee ID and calculated bonus."
                                ]
                            },
                            "usage": "Run the program and input employee ID and salary when prompted. The program will calculate and display the bonus."
                        }
                    },
                        {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. BANK_TRANSACTION.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 ACCOUNT-NUMBER PIC X(10).\n01 BALANCE PIC 9(7)V99 VALUE 0.\n01 AMOUNT PIC 9(7)V99 VALUE 0.\n01 OPTION PIC 9 VALUE 0.\nPROCEDURE DIVISION.\nDISPLAY 'Welcome to the Bank.'.\nDISPLAY 'Enter your account number: '.\nACCEPT ACCOUNT-NUMBER FROM CONSOLE.\nDISPLAY 'Select your option:'\nDISPLAY '1. Withdraw'\nDISPLAY '2. Deposit'\nACCEPT OPTION FROM CONSOLE.\nIF OPTION = 1\n   DISPLAY 'Enter amount to withdraw: '\n   ACCEPT AMOUNT FROM CONSOLE.\n   IF AMOUNT <= BALANCE\n      COMPUTE BALANCE = BALANCE - AMOUNT\n      DISPLAY 'Transaction Successful.'\n   ELSE\n      DISPLAY 'Insufficient Balance.'\n   END-IF\nELSE IF OPTION = 2\n   DISPLAY 'Enter amount to deposit: '\n   ACCEPT AMOUNT FROM CONSOLE.\n   COMPUTE BALANCE = BALANCE + AMOUNT\n   DISPLAY 'Transaction Successful.'\nELSE\n   DISPLAY 'Invalid Option.'\nEND-IF.",
                            "documentation": {
                                "program_name": "BANK_TRANSACTION",
                                "description": "This program simulates bank transactions such as withdrawals and deposits.",
                                "purpose": "Demonstrate basic banking operations in COBOL.",
                                "data_division": {
                                    "working_storage": [
                                        {
                                            "name": "ACCOUNT-NUMBER",
                                            "description": "Field to store the account number (up to 10 characters)."
                                        },
                                        {
                                            "name": "BALANCE",
                                            "description": "Numeric field to store the account balance (up to 7 digits before the decimal and 2 digits after)."
                                        },
                                        {
                                            "name": "AMOUNT",
                                            "description": "Numeric field to store the transaction amount (up to 7 digits before the decimal and 2 digits after)."
                                        },
                                        {
                                            "name": "OPTION",
                                            "description": "Numeric field to store the selected option (1 for Withdraw, 2 for Deposit)."
                                        }
                                    ]
                                },
                                "procedure_division": {
                                    "steps": [
                                        "Display welcome message and prompt for account number input.",
                                        "Display options (Withdraw/Deposit) and accept user's choice.",
                                        "If option is Withdraw (1), prompt for withdrawal amount and perform balance check.",
                                        "If option is Deposit (2), prompt for deposit amount.",
                                        "Display transaction status (Successful/Insufficient Balance/Invalid Option)."
                                    ]
                                },
                                "usage": "Run the program to simulate bank transactions based on user input."
                            }
                        },
                        {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. STUDENT_ATTENDANCE.\nDATA DIVISION.\nFILE SECTION.\nFD STUDENT-FILE.\n01 STUDENT-RECORD.\n   05 ROLL-NUMBER PIC X(5).\n   05 STUDENT-NAME PIC X(20).\n   05 ATTENDANCE-DAYS PIC 9(3) VALUE 0.\nWORKING-STORAGE SECTION.\n01 WS-ROLL-NUMBER PIC X(5).\n01 WS-ATTENDANCE-DAYS PIC 9(3).\nPROCEDURE DIVISION.\nOPEN INPUT STUDENT-FILE.\nACCEPT WS-ROLL-NUMBER FROM CONSOLE.\nREAD STUDENT-FILE INTO STUDENT-RECORD.\nPERFORM UNTIL ROLL-NUMBER = WS-ROLL-NUMBER\n   READ STUDENT-FILE INTO STUDENT-RECORD\nEND-PERFORM.\nDISPLAY 'Student: ', STUDENT-NAME.\nDISPLAY 'Attendance Days: ', ATTENDANCE-DAYS.\nCLOSE STUDENT-FILE.",
                            "documentation": {
                              "program_name": "STUDENT_ATTENDANCE",
                              "description": "This program retrieves student attendance data from a file based on the student's roll number.",
                              "purpose": "Demonstrate file handling and record retrieval in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "STUDENT-FILE is a file containing student attendance records.",
                                  "record_structure": [
                                    {
                                      "name": "ROLL-NUMBER",
                                      "description": "Field to store the student's roll number (up to 5 characters)."
                                    },
                                    {
                                      "name": "STUDENT-NAME",
                                      "description": "Field to store the student's name (up to 20 characters)."
                                    },
                                    {
                                      "name": "ATTENDANCE-DAYS",
                                      "description": "Numeric field to store the attendance days (up to 3 digits)."
                                    }
                                  ]
                                },
                                "working_storage": [
                                  {
                                    "name": "WS-ROLL-NUMBER",
                                    "description": "Field to store the roll number entered by the user (up to 5 characters)."
                                  },
                                  {
                                    "name": "WS-ATTENDANCE-DAYS",
                                    "description": "Field to store the attendance days retrieved from the file (up to 3 digits)."
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the STUDENT-FILE for input.",
                                  "Accept the roll number from the console.",
                                  "Read records from STUDENT-FILE until the desired roll number is found.",
                                  "Display the student's name and attendance days.",
                                  "Close the STUDENT-FILE."
                                ]
                              },
                              "usage": "Run the program and input a student's roll number to retrieve their attendance days."
                            }
                          },
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. CUSTOMER_INFO.\nDATA DIVISION.\nFILE SECTION.\nFD CUSTOMER-FILE.\n01 CUSTOMER-RECORD.\n   05 CUSTOMER-ID PIC X(5).\n   05 CUSTOMER-NAME PIC X(20).\n   05 CITY PIC X(15).\nWORKING-STORAGE SECTION.\n01 WS-CUSTOMER-ID PIC X(5).\nPROCEDURE DIVISION.\nOPEN INPUT CUSTOMER-FILE.\nACCEPT WS-CUSTOMER-ID FROM CONSOLE.\nREAD CUSTOMER-FILE INTO CUSTOMER-RECORD.\nPERFORM UNTIL CUSTOMER-ID = WS-CUSTOMER-ID\n   READ CUSTOMER-FILE INTO CUSTOMER-RECORD\nEND-PERFORM.\nDISPLAY 'Customer ID: ', CUSTOMER-ID.\nDISPLAY 'Customer Name: ', CUSTOMER-NAME.\nDISPLAY 'City: ', CITY.\nCLOSE CUSTOMER-FILE.",
                            "documentation": {
                              "program_name": "CUSTOMER_INFO",
                              "description": "This program retrieves customer information from a file based on the customer ID.",
                              "purpose": "Demonstrate file handling and record retrieval in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "CUSTOMER-FILE is a file containing customer records.",
                                  "record_structure": [
                                    {
                                      "name": "CUSTOMER-ID",
                                      "description": "Field to store the customer ID (up to 5 characters)."
                                    },
                                    {
                                      "name": "CUSTOMER-NAME",
                                      "description": "Field to store the customer name (up to 20 characters)."
                                    },
                                    {
                                      "name": "CITY",
                                      "description": "Field to store the city where the customer is located (up to 15 characters)."
                                    }
                                  ]
                                },
                                "working_storage": [
                                  {
                                    "name": "WS-CUSTOMER-ID",
                                    "description": "Field to store the customer ID entered by the user (up to 5 characters)."
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the CUSTOMER-FILE for input.",
                                  "Accept the customer ID from the console.",
                                  "Read records from CUSTOMER-FILE until the desired customer ID is found.",
                                  "Display the customer ID, name, and city.",
                                  "Close the CUSTOMER-FILE."
                                ]
                              },
                              "usage": "Run the program and input a customer ID to retrieve the corresponding customer information."
                            }
                          },    
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. EMPLOYEE_SALARY_REPORT.\nDATA DIVISION.\nFILE SECTION.\nFD EMPLOYEE-FILE.\n01 EMPLOYEE-RECORD.\n   05 EMPLOYEE-ID PIC X(5).\n   05 EMPLOYEE-NAME PIC X(20).\n   05 SALARY PIC 9(7)V99.\nWORKING-STORAGE SECTION.\n01 WS-TOTAL-SALARY PIC 9(7)V99 VALUE 0.\nPROCEDURE DIVISION.\nOPEN INPUT EMPLOYEE-FILE.\nREAD EMPLOYEE-FILE INTO EMPLOYEE-RECORD.\nPERFORM UNTIL EMPLOYEE-ID = '99999'\n   ADD SALARY TO WS-TOTAL-SALARY\n   READ EMPLOYEE-FILE INTO EMPLOYEE-RECORD\nEND-PERFORM.\nDISPLAY 'Total Salary: ', WS-TOTAL-SALARY.\nCLOSE EMPLOYEE-FILE.",
                            "documentation": {
                              "program_name": "EMPLOYEE_SALARY_REPORT",
                              "description": "This program calculates the total salary of employees.",
                              "purpose": "Demonstrate computation and accumulation of salaries in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "EMPLOYEE-FILE is a file containing employee records with salary information."
                                },
                                "working_storage": [
                                  {
                                    "name": "WS-TOTAL-SALARY",
                                    "description": "Field to store the total salary calculated (up to 7 digits before the decimal and 2 digits after).",
                                    "initial_value": "0"
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the EMPLOYEE-FILE for input.",
                                  "Read records from EMPLOYEE-FILE and accumulate salaries until '99999' is encountered as an employee ID.",
                                  "Display the total salary calculated.",
                                  "Close the EMPLOYEE-FILE."
                                ]
                              },
                              "usage": "Run the program to calculate the total salary of employees in the file."
                            }
                          },
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. INVOICE_GENERATOR.\nDATA DIVISION.\nFILE SECTION.\nFD PRODUCT-FILE.\n01 PRODUCT-RECORD.\n   05 PRODUCT-CODE PIC X(5).\n   05 PRODUCT-NAME PIC X(20).\n   05 UNIT-PRICE PIC 9(5)V99.\nWORKING-STORAGE SECTION.\n01 QUANTITY-SOLD PIC 9(3).\n01 TOTAL-AMOUNT PIC 9(7)V99 VALUE 0.\nPROCEDURE DIVISION.\nOPEN INPUT PRODUCT-FILE.\nDISPLAY 'Enter product code: '.\nACCEPT PRODUCT-CODE FROM CONSOLE.\nREAD PRODUCT-FILE INTO PRODUCT-RECORD.\nDISPLAY 'Enter quantity sold: '.\nACCEPT QUANTITY-SOLD FROM CONSOLE.\nCOMPUTE TOTAL-AMOUNT = QUANTITY-SOLD * UNIT-PRICE.\nDISPLAY 'Product: ', PRODUCT-NAME.\nDISPLAY 'Total Amount: ', TOTAL-AMOUNT.\nCLOSE PRODUCT-FILE.",
                            "documentation": {
                              "program_name": "INVOICE_GENERATOR",
                              "description": "This program generates an invoice based on product sales.",
                              "purpose": "Demonstrate computation of total amount for product sales in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "PRODUCT-FILE is a file containing product records with unit prices."
                                },
                                "working_storage": [
                                  {
                                    "name": "QUANTITY-SOLD",
                                    "description": "Field to store the quantity of products sold (up to 3 digits)."
                                  },
                                  {
                                    "name": "TOTAL-AMOUNT",
                                    "description": "Field to store the total amount calculated for the invoice (up to 7 digits before the decimal and 2 digits after).",
                                    "initial_value": "0"
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the PRODUCT-FILE for input.",
                                  "Accept the product code and quantity sold from the console.",
                                  "Read the corresponding product record from PRODUCT-FILE.",
                                  "Compute the total amount by multiplying the unit price with the quantity sold.",
                                  "Display the product name and total amount for the invoice.",
                                  "Close the PRODUCT-FILE."
                                ]
                              },
                              "usage": "Run the program to generate an invoice for a product based on the input product code and quantity sold."
                            }
                          },
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. STUDENT_MARKS_REPORT.\nDATA DIVISION.\nFILE SECTION.\nFD STUDENT-FILE.\n01 STUDENT-RECORD.\n   05 ROLL-NUMBER PIC X(5).\n   05 STUDENT-NAME PIC X(20).\n   05 MARKS1 PIC 9(3).\n   05 MARKS2 PIC 9(3).\n   05 MARKS3 PIC 9(3).\nWORKING-STORAGE SECTION.\n01 TOTAL-MARKS PIC 9(3) VALUE 0.\n01 AVERAGE-MARKS PIC 9(3)V9(2) VALUE 0.\nPROCEDURE DIVISION.\nOPEN INPUT STUDENT-FILE.\nREAD STUDENT-FILE INTO STUDENT-RECORD.\nPERFORM UNTIL ROLL-NUMBER = '99999'\n   COMPUTE TOTAL-MARKS = MARKS1 + MARKS2 + MARKS3\n   COMPUTE AVERAGE-MARKS = TOTAL-MARKS / 3\n   DISPLAY 'Student: ', STUDENT-NAME.\n   DISPLAY 'Total Marks: ', TOTAL-MARKS.\n   DISPLAY 'Average Marks: ', AVERAGE-MARKS.\n   READ STUDENT-FILE INTO STUDENT-RECORD\nEND-PERFORM.\nCLOSE STUDENT-FILE.",
                            "documentation": {
                              "program_name": "STUDENT_MARKS_REPORT",
                              "description": "This program generates a report of total and average marks for students.",
                              "purpose": "Demonstrate computation of total and average marks in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "STUDENT-FILE is a file containing student records with marks for three subjects."
                                },
                                "working_storage": [
                                  {
                                    "name": "TOTAL-MARKS",
                                    "description": "Field to store the total marks calculated (up to 3 digits).",
                                    "initial_value": "0"
                                  },
                                  {
                                    "name": "AVERAGE-MARKS",
                                    "description": "Field to store the average marks calculated (up to 3 digits before the decimal and 2 digits after).",
                                    "initial_value": "0"
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the STUDENT-FILE for input.",
                                  "Read records from STUDENT-FILE and calculate total and average marks until '99999' is encountered as a roll number.",
                                  "Display the student name, total marks, and average marks for each student.",
                                  "Close the STUDENT-FILE."
                                ]
                              },
                              "usage": "Run the program to generate a report of total and average marks for students in the file."
                            }
                          },
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. CUSTOMER_BILLING.\nDATA DIVISION.\nFILE SECTION.\nFD CUSTOMER-FILE.\n01 CUSTOMER-RECORD.\n   05 CUSTOMER-ID PIC X(5).\n   05 CUSTOMER-NAME PIC X(20).\n   05 UNITS-USED PIC 9(5).\nWORKING-STORAGE SECTION.\n01 BILL-AMOUNT PIC 9(6)V99 VALUE 0.\nPROCEDURE DIVISION.\nOPEN INPUT CUSTOMER-FILE.\nREAD CUSTOMER-FILE INTO CUSTOMER-RECORD.\nDISPLAY 'Enter customer ID: '.\nACCEPT CUSTOMER-ID FROM CONSOLE.\nPERFORM UNTIL CUSTOMER-ID = '99999'\n   IF UNITS-USED <= 100\n      COMPUTE BILL-AMOUNT = UNITS-USED * 5\n   ELSE\n      COMPUTE BILL-AMOUNT = (100 * 5) + ((UNITS-USED - 100) * 3)\n   END-IF.\n   DISPLAY 'Customer: ', CUSTOMER-NAME.\n   DISPLAY 'Bill Amount: ', BILL-AMOUNT.\n   READ CUSTOMER-FILE INTO CUSTOMER-RECORD\nEND-PERFORM.\nCLOSE CUSTOMER-FILE.",
                            "documentation": {
                              "program_name": "CUSTOMER_BILLING",
                              "description": "This program calculates the billing amount for customers based on units used.",
                              "purpose": "Demonstrate conditional billing calculation in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "CUSTOMER-FILE is a file containing customer records with units used information."
                                },
                                "working_storage": [
                                  {
                                    "name": "BILL-AMOUNT",
                                    "description": "Field to store the calculated bill amount (up to 6 digits before the decimal and 2 digits after).",
                                    "initial_value": "0"
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the CUSTOMER-FILE for input.",
                                  "Accept the customer ID from the console.",
                                  "Perform billing calculation based on units used.",
                                  "Display the customer name and calculated bill amount.",
                                  "Close the CUSTOMER-FILE."
                                ]
                              },
                              "usage": "Run the program to calculate the billing amount for customers."
                            }
                          },
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. STUDENT_ADMISSION.\nDATA DIVISION.\nFILE SECTION.\nFD STUDENT-FILE.\n01 STUDENT-RECORD.\n   05 STUDENT-ID PIC X(5).\n   05 STUDENT-NAME PIC X(20).\n   05 MARKS PIC 9(3).\nWORKING-STORAGE SECTION.\n01 SELECTED-STUDENTS PIC 9(3) VALUE 0.\nPROCEDURE DIVISION.\nOPEN INPUT STUDENT-FILE.\nPERFORM UNTIL SELECTED-STUDENTS = 5\n   READ STUDENT-FILE INTO STUDENT-RECORD.\n   IF MARKS >= 80\n      DISPLAY 'Selected Student: ', STUDENT-NAME.\n      ADD 1 TO SELECTED-STUDENTS\n   END-IF\nEND-PERFORM.\nCLOSE STUDENT-FILE.",
                            "documentation": {
                              "program_name": "STUDENT_ADMISSION",
                              "description": "This program selects students for admission based on their marks.",
                              "purpose": "Demonstrate conditional selection of students in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "STUDENT-FILE is a file containing student records with marks information."
                                },
                                "working_storage": [
                                  {
                                    "name": "SELECTED-STUDENTS",
                                    "description": "Field to store the count of selected students for admission (up to 3 digits).",
                                    "initial_value": "0"
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the STUDENT-FILE for input.",
                                  "Select students for admission based on marks criteria until 5 students are selected.",
                                  "Display the selected student names.",
                                  "Close the STUDENT-FILE."
                                ]
                              },
                              "usage": "Run the program to select students for admission based on marks."
                            }
                          },
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. STOCK_PRICE_CALCULATOR.\nDATA DIVISION.\nFILE SECTION.\nFD STOCK-FILE.\n01 STOCK-RECORD.\n   05 STOCK-ID PIC X(5).\n   05 STOCK-NAME PIC X(20).\n   05 STOCK-PRICE PIC 9(5)V99.\nWORKING-STORAGE SECTION.\n01 TOTAL-VALUE PIC 9(8)V99 VALUE 0.\nPROCEDURE DIVISION.\nOPEN INPUT STOCK-FILE.\nREAD STOCK-FILE INTO STOCK-RECORD.\nPERFORM UNTIL STOCK-ID = '99999'\n   COMPUTE TOTAL-VALUE = TOTAL-VALUE + (STOCK-PRICE * 100)\n   READ STOCK-FILE INTO STOCK-RECORD\nEND-PERFORM.\nDISPLAY 'Total Stock Value: ', TOTAL-VALUE.\nCLOSE STOCK-FILE.",
                            "documentation": {
                              "program_name": "STOCK_PRICE_CALCULATOR",
                              "description": "This program calculates the total value of stock based on stock prices.",
                              "purpose": "Demonstrate computation of total stock value in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "STOCK-FILE is a file containing stock records with prices information."
                                },
                                "working_storage": [
                                  {
                                    "name": "TOTAL-VALUE",
                                    "description": "Field to store the total value of stock (up to 8 digits before the decimal and 2 digits after).",
                                    "initial_value": "0"
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the STOCK-FILE for input.",
                                  "Calculate total stock value by summing up prices of all stocks.",
                                  "Display the total stock value.",
                                  "Close the STOCK-FILE."
                                ]
                              },
                              "usage": "Run the program to calculate the total value of stock based on stock prices."
                            }
                          },
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. PRODUCT_SALES_REPORT.\nDATA DIVISION.\nFILE SECTION.\nFD SALES-FILE.\n01 SALES-RECORD.\n   05 ORDER-NUMBER PIC X(8).\n   05 CUSTOMER-ID PIC X(5).\n   05 PRODUCT-ID PIC X(5).\n   05 QUANTITY-SOLD PIC 9(3).\n   05 TOTAL-AMOUNT PIC 9(6)V99.\nWORKING-STORAGE SECTION.\n01 TOTAL-SALES PIC 9(7)V99 VALUE 0.\nPROCEDURE DIVISION.\nOPEN INPUT SALES-FILE.\nREAD SALES-FILE INTO SALES-RECORD.\nPERFORM UNTIL ORDER-NUMBER = '99999999'\n   COMPUTE TOTAL-SALES = TOTAL-SALES + TOTAL-AMOUNT\n   READ SALES-FILE INTO SALES-RECORD\nEND-PERFORM.\nDISPLAY 'Total Sales: ', TOTAL-SALES.\nCLOSE SALES-FILE.",
                            "documentation": {
                              "program_name": "PRODUCT_SALES_REPORT",
                              "description": "This program generates a report of total sales based on product orders.",
                              "purpose": "Demonstrate computation of total sales in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "SALES-FILE is a file containing sales records with order, customer, product, quantity, and total amount information."
                                },
                                "working_storage": [
                                  {
                                    "name": "TOTAL-SALES",
                                    "description": "Field to store the total sales amount (up to 7 digits before the decimal and 2 digits after).",
                                    "initial_value": "0"
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the SALES-FILE for input.",
                                  "Calculate total sales by summing up total amounts from all sales records.",
                                  "Display the total sales amount.",
                                  "Close the SALES-FILE."
                                ]
                              },
                              "usage": "Run the program to generate a report of total sales based on product orders."
                            }
                          },
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. EMPLOYEE_PAYROLL.\nDATA DIVISION.\nFILE SECTION.\nFD EMPLOYEE-FILE.\n01 EMPLOYEE-RECORD.\n   05 EMPLOYEE-ID PIC X(5).\n   05 EMPLOYEE-NAME PIC X(20).\n   05 HOURS-WORKED PIC 9(3).\n   05 HOURLY-WAGE PIC 9(5)V99.\nWORKING-STORAGE SECTION.\n01 TOTAL-PAYROLL PIC 9(8)V99 VALUE 0.\nPROCEDURE DIVISION.\nOPEN INPUT EMPLOYEE-FILE.\nREAD EMPLOYEE-FILE INTO EMPLOYEE-RECORD.\nPERFORM UNTIL EMPLOYEE-ID = '99999'\n   COMPUTE TOTAL-PAYROLL = TOTAL-PAYROLL + (HOURS-WORKED * HOURLY-WAGE)\n   READ EMPLOYEE-FILE INTO EMPLOYEE-RECORD\nEND-PERFORM.\nDISPLAY 'Total Payroll: ', TOTAL-PAYROLL.\nCLOSE EMPLOYEE-FILE.",
                            "documentation": {
                              "program_name": "EMPLOYEE_PAYROLL",
                              "description": "This program calculates the total payroll based on employee hours worked and hourly wage.",
                              "purpose": "Demonstrate payroll computation in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "EMPLOYEE-FILE is a file containing employee records with hours worked and hourly wage information."
                                },
                                "working_storage": [
                                  {
                                    "name": "TOTAL-PAYROLL",
                                    "description": "Field to store the total payroll amount (up to 8 digits before the decimal and 2 digits after).",
                                    "initial_value": "0"
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the EMPLOYEE-FILE for input.",
                                  "Calculate total payroll by multiplying hours worked with hourly wage for each employee.",
                                  "Display the total payroll amount.",
                                  "Close the EMPLOYEE-FILE."
                                ]
                              },
                              "usage": "Run the program to calculate the total payroll based on employee hours worked and hourly wage."
                            }
                          },
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. STUDENT_MARKSHEET_GENERATOR.\nDATA DIVISION.\nFILE SECTION.\nFD STUDENT-FILE.\n01 STUDENT-RECORD.\n   05 ROLL-NUMBER PIC X(5).\n   05 STUDENT-NAME PIC X(20).\n   05 MARKS1 PIC 9(3).\n   05 MARKS2 PIC 9(3).\n   05 MARKS3 PIC 9(3).\nWORKING-STORAGE SECTION.\n01 TOTAL-MARKS PIC 9(3) VALUE 0.\n01 AVERAGE-MARKS PIC 9(3)V9(2) VALUE 0.\n01 GRADE PIC X.\nPROCEDURE DIVISION.\nOPEN INPUT STUDENT-FILE.\nREAD STUDENT-FILE INTO STUDENT-RECORD.\nPERFORM UNTIL ROLL-NUMBER = '99999'\n   COMPUTE TOTAL-MARKS = MARKS1 + MARKS2 + MARKS3\n   COMPUTE AVERAGE-MARKS = TOTAL-MARKS / 3\n   IF AVERAGE-MARKS >= 80\n      MOVE 'A' TO GRADE\n   ELSE IF AVERAGE-MARKS >= 60\n      MOVE 'B' TO GRADE\n   ELSE IF AVERAGE-MARKS >= 40\n      MOVE 'C' TO GRADE\n   ELSE\n      MOVE 'F' TO GRADE\n   END-IF\n   DISPLAY 'Student: ', STUDENT-NAME.\n   DISPLAY 'Total Marks: ', TOTAL-MARKS.\n   DISPLAY 'Average Marks: ', AVERAGE-MARKS.\n   DISPLAY 'Grade: ', GRADE.\n   READ STUDENT-FILE INTO STUDENT-RECORD\nEND-PERFORM.\nCLOSE STUDENT-FILE.",
                            "documentation": {
                              "program_name": "STUDENT_MARKSHEET_GENERATOR",
                              "description": "This program generates a marksheet for students based on their marks and calculates their grades.",
                              "purpose": "Demonstrate grade calculation based on average marks in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "STUDENT-FILE is a file containing student records with marks information."
                                },
                                "working_storage": [
                                  {
                                    "name": "TOTAL-MARKS",
                                    "description": "Field to store the total marks obtained by the student (up to 3 digits).",
                                    "initial_value": "0"
                                  },
                                  {
                                    "name": "AVERAGE-MARKS",
                                    "description": "Field to store the average marks obtained by the student (up to 3 digits before the decimal and 2 digits after).",
                                    "initial_value": "0"
                                  },
                                  {
                                    "name": "GRADE",
                                    "description": "Field to store the grade obtained by the student.",
                                    "initial_value": ""
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the STUDENT-FILE for input.",
                                  "Calculate total marks and average marks for each student.",
                                  "Determine grade based on average marks.",
                                  "Display the student's details, total marks, average marks, and grade.",
                                  "Close the STUDENT-FILE."
                                ]
                              },
                              "usage": "Run the program to generate a marksheet and calculate grades for students."
                            }
                          },
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. ORDER_PROCESSING.\nDATA DIVISION.\nFILE SECTION.\nFD ORDER-FILE.\n01 ORDER-RECORD.\n   05 ORDER-NUMBER PIC X(8).\n   05 CUSTOMER-ID PIC X(5).\n   05 PRODUCT-ID PIC X(5).\n   05 QUANTITY-ORDERED PIC 9(3).\n   05 ORDER-TOTAL PIC 9(6)V99.\nWORKING-STORAGE SECTION.\n01 TOTAL-ORDERS PIC 9(7)V99 VALUE 0.\nPROCEDURE DIVISION.\nOPEN INPUT ORDER-FILE.\nREAD ORDER-FILE INTO ORDER-RECORD.\nPERFORM UNTIL ORDER-NUMBER = '99999999'\n   COMPUTE TOTAL-ORDERS = TOTAL-ORDERS + ORDER-TOTAL\n   READ ORDER-FILE INTO ORDER-RECORD\nEND-PERFORM.\nDISPLAY 'Total Orders: ', TOTAL-ORDERS.\nCLOSE ORDER-FILE.",
                            "documentation": {
                              "program_name": "ORDER_PROCESSING",
                              "description": "This program calculates the total value of orders processed.",
                              "purpose": "Demonstrate computation of total orders value in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "ORDER-FILE is a file containing order records with order number, customer ID, product ID, quantity ordered, and order total information."
                                },
                                "working_storage": [
                                  {
                                    "name": "TOTAL-ORDERS",
                                    "description": "Field to store the total value of orders processed (up to 7 digits before the decimal and 2 digits after).",
                                    "initial_value": "0"
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the ORDER-FILE for input.",
                                  "Calculate total orders value by summing up order totals from all order records.",
                                  "Display the total orders value.",
                                  "Close the ORDER-FILE."
                                ]
                              },
                              "usage": "Run the program to calculate the total value of orders processed."
                            }
                          },
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. CUSTOMER_INFO_MANAGER.\nDATA DIVISION.\nFILE SECTION.\nFD CUSTOMER-FILE.\n01 CUSTOMER-RECORD.\n   05 CUSTOMER-ID PIC X(5).\n   05 CUSTOMER-NAME PIC X(20).\n   05 CITY PIC X(15).\nWORKING-STORAGE SECTION.\n01 WS-CUSTOMER-ID PIC X(5).\nPROCEDURE DIVISION.\nOPEN INPUT CUSTOMER-FILE.\nACCEPT WS-CUSTOMER-ID FROM CONSOLE.\nREAD CUSTOMER-FILE INTO CUSTOMER-RECORD.\nPERFORM UNTIL CUSTOMER-ID = WS-CUSTOMER-ID\n   READ CUSTOMER-FILE INTO CUSTOMER-RECORD\nEND-PERFORM.\nDISPLAY 'Customer ID: ', CUSTOMER-ID.\nDISPLAY 'Customer Name: ', CUSTOMER-NAME.\nDISPLAY 'City: ', CITY.\nCLOSE CUSTOMER-FILE.",
                            "documentation": {
                              "program_name": "CUSTOMER_INFO_MANAGER",
                              "description": "This program manages customer information and displays details based on customer ID.",
                              "purpose": "Demonstrate customer info management in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "CUSTOMER-FILE is a file containing customer records with ID, name, and city information."
                                },
                                "working_storage": [
                                  {
                                    "name": "WS-CUSTOMER-ID",
                                    "description": "Field to store the customer ID entered by the user.",
                                    "initial_value": ""
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the CUSTOMER-FILE for input.",
                                  "Accept customer ID from the console.",
                                  "Read customer records until matching the input customer ID.",
                                  "Display customer ID, name, and city.",
                                  "Close the CUSTOMER-FILE."
                                ]
                              },
                              "usage": "Run the program to manage and display customer information."
                            }
                          },
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. STUDENT_INFO_MANAGER.\nDATA DIVISION.\nFILE SECTION.\nFD STUDENT-FILE.\n01 STUDENT-RECORD.\n   05 ROLL-NUMBER PIC X(5).\n   05 STUDENT-NAME PIC X(20).\n   05 AGE PIC 9(2).\nWORKING-STORAGE SECTION.\n01 WS-ROLL-NUMBER PIC X(5).\nPROCEDURE DIVISION.\nOPEN INPUT STUDENT-FILE.\nACCEPT WS-ROLL-NUMBER FROM CONSOLE.\nREAD STUDENT-FILE INTO STUDENT-RECORD.\nPERFORM UNTIL ROLL-NUMBER = WS-ROLL-NUMBER\n   READ STUDENT-FILE INTO STUDENT-RECORD\nEND-PERFORM.\nDISPLAY 'Student: ', STUDENT-NAME.\nDISPLAY 'Age: ', AGE.\nCLOSE STUDENT-FILE.",
                            "documentation": {
                              "program_name": "STUDENT_INFO_MANAGER",
                              "description": "This program manages student information and displays details based on roll number.",
                              "purpose": "Demonstrate student info management in COBOL.",
                              "data_division": {
                                "file_section": {
                                  "file_description": "STUDENT-FILE is a file containing student records with roll number, name, and age information."
                                },
                                "working_storage": [
                                  {
                                    "name": "WS-ROLL-NUMBER",
                                    "description": "Field to store the roll number entered by the user.",
                                    "initial_value": ""
                                  }
                                ]
                              },
                              "procedure_division": {
                                "steps": [
                                  "Open the STUDENT-FILE for input.",
                                  "Accept roll number from the console.",
                                  "Read student records until matching the input roll number.",
                                  "Display student name and age.",
                                  "Close the STUDENT-FILE."
                                ]
                              },
                              "usage": "Run the program to manage and display student information."
                            }
                          },
                          
                          {
                            "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. PRODUCT_INFO_MANAGER.\nDATA DIVISION.\nFILE SECTION.\nFD PRODUCT-FILE.\n01 PRODUCT-RECORD.\n05 PRODUCT-ID PIC X(5).\n05 PRODUCT-NAME PIC X(20).\n05 CATEGORY PIC X(10).\nWORKING-STORAGE SECTION.\n01 WS-PRODUCT-ID PIC X(5).\nPROCEDURE DIVISION.\nOPEN INPUT PRODUCT-FILE.\nACCEPT WS-PRODUCT-ID FROM CONSOLE.\nREAD PRODUCT-FILE INTO PRODUCT-RECORD.\nPERFORM UNTIL PRODUCT-ID = WS-PRODUCT-ID\nREAD PRODUCT-FILE INTO PRODUCT-RECORD\nEND-PERFORM.\nDISPLAY 'Product ID: ', PRODUCT-ID.\nDISPLAY 'Product Name: ', PRODUCT-NAME.\nDISPLAY 'Category: ', CATEGORY.\nCLOSE PRODUCT-FILE.",
                            "documentation": {
                                "program_name": "PRODUCT_INFO_MANAGER",
                                "description": "This program retrieves product information from a file based on the product ID provided by the user.",
                                "purpose": "Demonstrate file input/output and record retrieval in COBOL.",
                                "data_division": {
                                    "file_section": {
                                        "file_description": "PRODUCT-FILE is a file containing product records with ID, name, and category information."
                                    },
                                    "working_storage": [
                                        {
                                            "name": "WS-PRODUCT-ID",
                                            "description": "Field to store the product ID entered by the user.",
                                            "initial_value": ""
                                        }
                                    ]
                                },
                                "procedure_division": {
                                    "steps": [
                                        "Open the PRODUCT-FILE for input.",
                                        "Accept product ID from the console.",
                                        "Read product records until matching the input product ID.",
                                        "Display product ID, name, and category.",
                                        "Close the PRODUCT-FILE."
                                    ]
                                },
                                "usage": "Run the program to manage and display product information."
                            }
                        }
                        ,
                        {
                          "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. STUDENT_MARKS_MANAGER.\nDATA DIVISION.\nFILE SECTION.\nFD MARKS-FILE.\n01 MARKS-RECORD.\n05 ROLL-NUMBER PIC X(5).\n05 MARKS1 PIC 9(3).\n05 MARKS2 PIC 9(3).\n05 MARKS3 PIC 9(3).\nWORKING-STORAGE SECTION.\n01 WS-ROLL-NUMBER PIC X(5).\n01 TOTAL-MARKS PIC 9(3) VALUE 0.\nPROCEDURE DIVISION.\nOPEN INPUT MARKS-FILE.\nACCEPT WS-ROLL-NUMBER FROM CONSOLE.\nREAD MARKS-FILE INTO MARKS-RECORD.\nPERFORM UNTIL ROLL-NUMBER = WS-ROLL-NUMBER\nCOMPUTE TOTAL-MARKS = MARKS1 + MARKS2 + MARKS3\nREAD MARKS-FILE INTO MARKS-RECORD\nEND-PERFORM.\nDISPLAY 'Total Marks: ', TOTAL-MARKS.\nCLOSE MARKS-FILE.",
                          "documentation": {
                              "program_name": "STUDENT_MARKS_MANAGER",
                              "description": "This program retrieves student marks from a file based on the roll number provided by the user and calculates the total marks.",
                              "purpose": "Demonstrate file input/output, record retrieval, and computation in COBOL.",
                              "data_division": {
                                  "file_section": {
                                      "file_description": "MARKS-FILE is a file containing student marks records with roll number, marks1, marks2, and marks3 information."
                                  }
                              },
                              "working_storage": [
                                  {
                                      "name": "WS-ROLL-NUMBER",
                                      "description": "Field to store the roll number entered by the user.",
                                      "initial_value": ""
                                  },
                                  {
                                      "name": "TOTAL-MARKS",
                                      "description": "Field to store the total marks calculated by the program.",
                                      "initial_value": "0"
                                  }
                              ],
                              "procedure_division": {
                                  "steps": [
                                      "Open the MARKS-FILE for input.",
                                      "Accept roll number from the console.",
                                      "Read marks records until matching the input roll number.",
                                      "Compute total marks by adding marks1, marks2, and marks3.",
                                      "Display the total marks.",
                                      "Close the MARKS-FILE."
                                  ]
                              },
                              "usage": "Run the program to manage and display student marks information."
                          }
                      }
                      ,
                      {
                        "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. PRODUCT_MANAGER.\nDATA DIVISION.\nFILE SECTION.\nFD PRODUCT-FILE.\n01 PRODUCT-RECORD.\n05 PRODUCT-ID PIC X(5).\n05 PRODUCT-NAME PIC X(20).\n05 CATEGORY PIC X(10).\nWORKING-STORAGE SECTION.\n01 WS-PRODUCT-ID PIC X(5).\nPROCEDURE DIVISION.\nOPEN INPUT PRODUCT-FILE.\nACCEPT WS-PRODUCT-ID FROM CONSOLE.\nREAD PRODUCT-FILE INTO PRODUCT-RECORD.\nPERFORM UNTIL PRODUCT-ID = WS-PRODUCT-ID\n   READ PRODUCT-FILE INTO PRODUCT-RECORD\nEND-PERFORM.\nDISPLAY 'Product ID: ', PRODUCT-ID.\nDISPLAY 'Product Name: ', PRODUCT-NAME.\nDISPLAY 'Category: ', CATEGORY.\nCLOSE PRODUCT-FILE.",
                        "documentation": {
                            "program_name": "PRODUCT_MANAGER",
                            "description": "This program retrieves product information from a file based on the product ID provided by the user.",
                            "purpose": "Demonstrate file input/output and record retrieval in COBOL.",
                            "data_division": {
                                "file_section": {
                                    "file_description": "PRODUCT-FILE is a file containing product records with product ID, product name, and category information."
                                }
                            },
                            "working_storage": [
                                {
                                    "name": "WS-PRODUCT-ID",
                                    "description": "Field to store the product ID entered by the user.",
                                    "initial_value": ""
                                }
                            ],
                            "procedure_division": {
                                "steps": [
                                    "Open the PRODUCT-FILE for input.",
                                    "Accept product ID from the console.",
                                    "Read product records until matching the input product ID.",
                                    "Display product ID, product name, and category.",
                                    "Close the PRODUCT-FILE."
                                ]
                            },
                            "usage": "Run the program to manage and display product information."
                        }
                    }
                    ,
                    {
                      "cobol_code": "IDENTIFICATION DIVISION.\nPROGRAM-ID. STUDENT_INFO.\nDATA DIVISION.\nFILE SECTION.\nFD STUDENT-FILE.\n01 STUDENT-RECORD.\n05 ROLL-NUMBER PIC X(5).\n05 STUDENT-NAME PIC X(20).\n05 AGE PIC 9(2).\nWORKING-STORAGE SECTION.\n01 WS-ROLL-NUMBER PIC X(5).\nPROCEDURE DIVISION.\nOPEN INPUT STUDENT-FILE.\nACCEPT WS-ROLL-NUMBER FROM CONSOLE.\nREAD STUDENT-FILE INTO STUDENT-RECORD.\nPERFORM UNTIL ROLL-NUMBER = WS-ROLL-NUMBER\nREAD STUDENT-FILE INTO STUDENT-RECORD\nEND-PERFORM.\nDISPLAY 'Student: ', STUDENT-NAME.\nDISPLAY 'Age: ', AGE.\nCLOSE STUDENT-FILE.",
                      "documentation": {
                          "program_name": "STUDENT_INFO",
                          "description": "This program retrieves student information from a file based on the roll number provided by the user.",
                          "purpose": "Demonstrate file input/output and record retrieval in COBOL.",
                          "data_division": {
                              "file_section": {
                                  "file_description": "STUDENT-FILE is a file containing student records with roll number, name, and age information."
                              }
                          },
                          "working_storage": [
                              {
                                  "name": "WS-ROLL-NUMBER",
                                  "description": "Field to store the roll number entered by the user.",
                                  "initial_value": ""
                              }
                          ],
                          "procedure_division": {
                              "steps": [
                                  "Open the STUDENT-FILE for input.",
                                  "Accept roll number from the console.",
                                  "Read student records until matching the input roll number.",
                                  "Display student name and age.",
                                  "Close the STUDENT-FILE."
                              ]
                          },
                          "usage": "Run the program to manage and display student information."
                      }
                  }
]